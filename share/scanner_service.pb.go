// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scanner_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScanImageRequest struct {
	Registry    string `protobuf:"bytes,1,opt,name=Registry" json:"Registry,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Repository  string `protobuf:"bytes,4,opt,name=Repository" json:"Repository,omitempty"`
	Tag         string `protobuf:"bytes,5,opt,name=Tag" json:"Tag,omitempty"`
	Proxy       string `protobuf:"bytes,6,opt,name=Proxy" json:"Proxy,omitempty"`
	ScanLayers  bool   `protobuf:"varint,7,opt,name=ScanLayers" json:"ScanLayers,omitempty"`
	ScanSecrets bool   `protobuf:"varint,8,opt,name=ScanSecrets" json:"ScanSecrets,omitempty"`
	BaseImage   string `protobuf:"bytes,9,opt,name=BaseImage" json:"BaseImage,omitempty"`
}

func (m *ScanImageRequest) Reset()                    { *m = ScanImageRequest{} }
func (m *ScanImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ScanImageRequest) ProtoMessage()               {}
func (*ScanImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ScanImageRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *ScanImageRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ScanImageRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ScanImageRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ScanImageRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ScanImageRequest) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func (m *ScanImageRequest) GetScanLayers() bool {
	if m != nil {
		return m.ScanLayers
	}
	return false
}

func (m *ScanImageRequest) GetScanSecrets() bool {
	if m != nil {
		return m.ScanSecrets
	}
	return false
}

func (m *ScanImageRequest) GetBaseImage() string {
	if m != nil {
		return m.BaseImage
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanImageRequest)(nil), "share.ScanImageRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScannerService service

type ScannerServiceClient interface {
	ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error)
	Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type scannerServiceClient struct {
	cc *grpc.ClientConn
}

func NewScannerServiceClient(cc *grpc.ClientConn) ScannerServiceClient {
	return &scannerServiceClient{cc}
}

func (c *scannerServiceClient) ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanRunning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanImageData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanAppPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ScannerService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanAwsLambda", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScannerService service

type ScannerServiceServer interface {
	ScanRunning(context.Context, *ScanRunningRequest) (*ScanResult, error)
	ScanImageData(context.Context, *ScanData) (*ScanResult, error)
	ScanImage(context.Context, *ScanImageRequest) (*ScanResult, error)
	ScanAppPackage(context.Context, *ScanAppRequest) (*ScanResult, error)
	Ping(context.Context, *RPCVoid) (*RPCVoid, error)
	ScanAwsLambda(context.Context, *ScanAwsLambdaRequest) (*ScanResult, error)
}

func RegisterScannerServiceServer(s *grpc.Server, srv ScannerServiceServer) {
	s.RegisterService(&_ScannerService_serviceDesc, srv)
}

func _ScannerService_ScanRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanRunning(ctx, req.(*ScanRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImageData(ctx, req.(*ScanData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImage(ctx, req.(*ScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, req.(*ScanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).Ping(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAwsLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAwsLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAwsLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, req.(*ScanAwsLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ScannerService",
	HandlerType: (*ScannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanRunning",
			Handler:    _ScannerService_ScanRunning_Handler,
		},
		{
			MethodName: "ScanImageData",
			Handler:    _ScannerService_ScanImageData_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _ScannerService_ScanImage_Handler,
		},
		{
			MethodName: "ScanAppPackage",
			Handler:    _ScannerService_ScanAppPackage_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ScannerService_Ping_Handler,
		},
		{
			MethodName: "ScanAwsLambda",
			Handler:    _ScannerService_ScanAwsLambda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner_service.proto",
}

func init() { proto.RegisterFile("scanner_service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xd5, 0xbf, 0x34, 0x06, 0x4a, 0xb1, 0xa8, 0x30, 0x01, 0xa1, 0x8a, 0x01, 0x75, 0xea,
	0x40, 0x07, 0x24, 0x18, 0x50, 0x81, 0x05, 0xa9, 0x43, 0x94, 0x00, 0x2b, 0x72, 0xd3, 0x53, 0x88,
	0x20, 0x76, 0xf0, 0xa5, 0x94, 0xbc, 0x04, 0xcf, 0xc8, 0xa3, 0x20, 0xdb, 0x6d, 0xb1, 0x50, 0x61,
	0xf3, 0xf7, 0xfd, 0xee, 0xce, 0xbe, 0x2f, 0x21, 0x5d, 0x8c, 0xb9, 0x10, 0xa0, 0x9e, 0x10, 0xd4,
	0x7b, 0x1a, 0xc3, 0x20, 0x57, 0xb2, 0x90, 0xb4, 0x81, 0xcf, 0x5c, 0x81, 0xbf, 0x15, 0xcb, 0x2c,
	0x93, 0xc2, 0x9a, 0x3e, 0xd1, 0xb5, 0xf6, 0x7c, 0xf2, 0x59, 0x25, 0x9d, 0x28, 0xe6, 0xe2, 0x2e,
	0xe3, 0x09, 0x84, 0xf0, 0x36, 0x03, 0x2c, 0xa8, 0x4f, 0x5a, 0x21, 0x24, 0x29, 0x16, 0xaa, 0x64,
	0x95, 0x5e, 0xa5, 0xef, 0x85, 0x2b, 0xad, 0xd9, 0x03, 0x82, 0x12, 0x3c, 0x03, 0x56, 0xb5, 0x6c,
	0xa9, 0x35, 0x0b, 0x38, 0xe2, 0x5c, 0xaa, 0x29, 0xab, 0x59, 0xb6, 0xd4, 0xf4, 0x98, 0x90, 0x10,
	0x72, 0x89, 0x69, 0x21, 0x55, 0xc9, 0xea, 0x86, 0x3a, 0x0e, 0xed, 0x90, 0xda, 0x3d, 0x4f, 0x58,
	0xc3, 0x00, 0x7d, 0xa4, 0x7b, 0xa4, 0x11, 0x28, 0xf9, 0x51, 0xb2, 0xa6, 0xf1, 0xac, 0xd0, 0x73,
	0xf4, 0x7b, 0xc7, 0xbc, 0x04, 0x85, 0x6c, 0xa3, 0x57, 0xe9, 0xb7, 0x42, 0xc7, 0xa1, 0x3d, 0xb2,
	0xa9, 0x55, 0x04, 0xb1, 0x82, 0x02, 0x59, 0xcb, 0x14, 0xb8, 0x16, 0x3d, 0x22, 0xde, 0x35, 0x47,
	0x30, 0x1b, 0x33, 0xcf, 0xcc, 0xfe, 0x31, 0xce, 0xbe, 0xaa, 0xa4, 0x1d, 0xd9, 0x2c, 0x23, 0x1b,
	0x25, 0xbd, 0xb4, 0x23, 0xc3, 0x99, 0x10, 0xa9, 0x48, 0xe8, 0xc1, 0xc0, 0x84, 0x3a, 0x70, 0xbc,
	0x45, 0x70, 0xfe, 0xae, 0x8b, 0x00, 0x67, 0xaf, 0x05, 0x1d, 0x92, 0xed, 0x55, 0xbe, 0xb7, 0xbc,
	0xe0, 0x74, 0xc7, 0xa9, 0xd1, 0xc6, 0xba, 0xa6, 0x73, 0xe2, 0xad, 0x9a, 0xe8, 0xbe, 0xc3, 0xdd,
	0xcf, 0xb4, 0xae, 0xf1, 0xc2, 0x3e, 0x7e, 0x94, 0xe7, 0x01, 0x8f, 0x5f, 0x74, 0x77, 0xd7, 0x29,
	0x1a, 0xe5, 0xf9, 0x3f, 0xbd, 0xa7, 0xa4, 0x1e, 0xe8, 0xfd, 0xda, 0x0b, 0x14, 0x06, 0x37, 0x8f,
	0x32, 0x9d, 0xfa, 0xbf, 0x34, 0xbd, 0xb2, 0x1b, 0x8d, 0xe6, 0x38, 0xe6, 0xd9, 0x64, 0xca, 0xe9,
	0xa1, 0x7b, 0xc5, 0xd2, 0xfd, 0xfb, 0xa2, 0x49, 0xd3, 0xfc, 0x7a, 0xc3, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5a, 0x15, 0x54, 0xef, 0xb4, 0x02, 0x00, 0x00,
}
